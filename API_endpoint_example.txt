### API Documentation for TaskFlow Application

Below is a comprehensive documentation of all API endpoints required by the frontend implementation. This can serve as a reference for backend developers to ensure all necessary endpoints are implemented correctly.

## Base URL

All API endpoints are relative to: `/api`

---

## 1. Authentication

### Login

- **URL**: `/token/`
- **Method**: `POST`
- **Description**: Authenticates a user and returns access and refresh tokens
- **Request Body**:

```json
{
  "username": "string",
  "password": "string"
}
```


- **Response**:

```json
{
  "access": "string",
  "refresh": "string"
}
```




### Refresh Token

- **URL**: `/token/refresh/`
- **Method**: `POST`
- **Description**: Refreshes an expired access token using a valid refresh token
- **Request Body**:

```json
{
  "refresh": "string"
}
```


- **Response**:

```json
{
  "access": "string"
}
```




---

## 2. User Management

### Get Current User

- **URL**: `/users/me/`
- **Method**: `GET`
- **Description**: Returns the currently authenticated user's details
- **Authentication**: Required
- **Response**:

```json
{
  "id": "integer",
  "username": "string",
  "first_name": "string",
  "last_name": "string",
  "department": {
    "id": "integer",
    "name": "string"
  },
  "role": {
    "id": "integer",
    "name": "string"
  }
}
```




### List Users

- **URL**: `/users/`
- **Method**: `GET`
- **Description**: Returns a list of users for task assignment
- **Authentication**: Required
- **Response**:

```json
{
  "count": "integer",
  "next": "string|null",
  "previous": "string|null",
  "results": [
    {
      "id": "integer",
      "username": "string",
      "first_name": "string",
      "last_name": "string",
      "department": {
        "id": "integer",
        "name": "string"
      },
      "role": {
        "id": "integer",
        "name": "string"
      }
    }
  ]
}
```




---

## 3. Process/Form Templates

### List Processes

- **URL**: `/processes/processes/`
- **Method**: `GET`
- **Description**: Returns a list of available process templates
- **Authentication**: Required
- **Response**:

```json
{
  "count": "integer",
  "next": "string|null",
  "previous": "string|null",
  "results": [
    {
      "id": "integer",
      "name": "string",
      "description": "string",
      "fields": [
        {
          "id": "integer",
          "name": "string",
          "field_type": "string",
          "required": "boolean",
          "options": ["string"]|null
        }
      ],
      "actions": [
        {
          "id": "integer",
          "name": "string",
          "description": "string",
          "action_type": {
            "id": "integer",
            "name": "string"
          }
        }
      ],
      "allowed_users": [
        {
          "id": "integer",
          "user": {
            "id": "integer",
            "username": "string"
          }
        }
      ]
    }
  ]
}
```




### Get Process Details

- **URL**: `/processes/processes/{id}/`
- **Method**: `GET`
- **Description**: Returns details of a specific process template
- **Authentication**: Required
- **Parameters**:

- `id`: Process ID (in path)



- **Response**: Same as a single process object from the list endpoint


---

## 4. Tasks

### List Sent Tasks

- **URL**: `/tasks/sent/`
- **Method**: `GET`
- **Description**: Returns tasks created by the current user
- **Authentication**: Required
- **Response**:

```json
{
  "count": "integer",
  "next": "string|null",
  "previous": "string|null",
  "results": [
    {
      "id": "integer",
      "title": "string",
      "process": {
        "id": "integer",
        "name": "string"
      },
      "state": {
        "id": "integer",
        "name": "string"
      },
      "created_at": "datetime",
      "created_by": {
        "id": "integer",
        "username": "string"
      },
      "stakeholders": [
        {
          "id": "integer",
          "user": {
            "id": "integer",
            "username": "string"
          }
        }
      ]
    }
  ]
}
```




### List Received Tasks

- **URL**: `/tasks/received/`
- **Method**: `GET`
- **Description**: Returns tasks assigned to the current user
- **Authentication**: Required
- **Response**: Same format as sent tasks, with the addition of `available_actions`

```json
{
  "results": [
    {
      "id": "integer",
      "title": "string",
      "process": {
        "id": "integer",
        "name": "string"
      },
      "state": {
        "id": "integer",
        "name": "string"
      },
      "created_at": "datetime",
      "created_by": {
        "id": "integer",
        "username": "string"
      },
      "stakeholders": [...],
      "available_actions": [
        {
          "id": "integer",
          "name": "string",
          "description": "string"
        }
      ]
    }
  ]
}
```




### Get Task Details

- **URL**: `/tasks/{id}/`
- **Method**: `GET`
- **Description**: Returns details of a specific task
- **Authentication**: Required
- **Parameters**:

- `id`: Task ID (in path)



- **Response**:

```json
{
  "id": "integer",
  "title": "string",
  "process": {
    "id": "integer",
    "name": "string"
  },
  "state": {
    "id": "integer",
    "name": "string"
  },
  "created_at": "datetime",
  "created_by": {
    "id": "integer",
    "username": "string"
  },
  "stakeholders": [...],
  "task_data": [
    {
      "field": {
        "id": "integer",
        "name": "string"
      },
      "value": "string"
    }
  ],
  "action_logs": [
    {
      "id": "integer",
      "user": {
        "id": "integer",
        "username": "string"
      },
      "action": {
        "id": "integer",
        "name": "string",
        "description": "string"
      },
      "comment": "string",
      "timestamp": "datetime"
    }
  ],
  "available_actions": [
    {
      "id": "integer",
      "name": "string",
      "description": "string"
    }
  ]
}
```




### Create Task

- **URL**: `/tasks/`
- **Method**: `POST`
- **Description**: Creates a new task
- **Authentication**: Required
- **Request Body**:

```json
{
  "title": "string",
  "process": "integer",
  "assignee": "integer",
  "fields": [
    {
      "field_id": "integer",
      "value": "string"
    }
  ]
}
```


- **Response**: Returns the created task object


---

## 5. Task Actions

### Perform Task Action

- **URL**: `/tasks/{id}/actions/`
- **Method**: `POST`
- **Description**: Performs an action on a task (approve, reject, complete, etc.)
- **Authentication**: Required
- **Parameters**:

- `id`: Task ID (in path)



- **Request Body**:

```json
{
  "action": "string",
  "comment": "string",
  "metadata": {
    "key": "value"
  }
}
```


- **Response**:

```json
{
  "success": "boolean",
  "task": {
    // Updated task object
  }
}
```




---

## 6. Task History

### Get Task History

- **URL**: `/tasks/{id}/history/`
- **Method**: `GET`
- **Description**: Returns the detailed history of a task
- **Authentication**: Required
- **Parameters**:

- `id`: Task ID (in path)



- **Response**:

```json
{
  "task_id": "integer",
  "history": [
    {
      "id": "integer",
      "user": {
        "id": "integer",
        "username": "string"
      },
      "action": {
        "id": "integer",
        "name": "string",
        "description": "string"
      },
      "from_state": {
        "id": "integer",
        "name": "string"
      },
      "to_state": {
        "id": "integer",
        "name": "string"
      },
      "comment": "string",
      "metadata": {
        "key": "value"
      },
      "timestamp": "datetime"
    }
  ]
}
```




---

## Authentication and Headers

All authenticated requests should include:

```plaintext
Authorization: Bearer {access_token}
Content-Type: application/json
```

## Pagination

List endpoints support pagination with the following query parameters:

- `page`: Page number
- `page_size`: Number of items per page


## Error Responses

All endpoints should return appropriate HTTP status codes and error messages:

```json
{
  "error": "string",
  "detail": "string"
}
```

## Notes for Implementation

1. **State Transitions**: The backend should handle state transitions based on actions, not direct state updates.
2. **Validation**: Ensure proper validation for task creation and actions based on process rules.
3. **Permissions**: Implement proper permission checks for all endpoints.
4. **Audit Trail**: Maintain a complete audit trail of all actions performed on tasks.


This API documentation covers all the endpoints required by the frontend implementation and provides a solid foundation for building a robust task management system.



### Backend API Endpoints Example

## 1. Authentication Endpoints

### 1.1. Token Obtain (Login)

- **URL**: `/api/token/`
- **Method**: `POST`
- **Description**: Authenticates a user and returns access and refresh tokens


**Request:**

```json
{
  "username": "john.doe",
  "password": "securepassword123"
}
```

**Response:**

```json
{
  "access": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}
```

### 1.2. Token Refresh

- **URL**: `/api/token/refresh/`
- **Method**: `POST`
- **Description**: Refreshes an expired access token using a valid refresh token


**Request:**

```json
{
  "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}
```

**Response:**

```json
{
  "access": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}
```

## 2. Process/Form Template Endpoints

### 2.1. List All Processes

- **URL**: `/api/processes/processes/`
- **Method**: `GET`
- **Description**: Returns a list of all available process templates


**Response:**

```json
{
  "count": 3,
  "next": null,
  "previous": null,
  "results": [
    {
      "id": 1,
      "name": "maintenance request",
      "description": "Request for maintenance services",
    },
    {
      "id": 2,
      "name": "common task",
      "description": "General task assignment",
    }
  ]
}
```

### 2.2. Get Process Detail

- **URL**: `/api/processes/processes/{id}/`
- **Method**: `GET`
- **Description**: Returns details of a specific process template


**Response:**

```json
{
  "id": 1,
  "name": "maintenance request",
  "description": "Request for maintenance services",
  "fields": [
    {
      "id": 2,
      "name": "Task detail",
      "field_type": "text",
      "required": true,
      "options": null
    },
    {
      "id": 1,
      "name": "property id",
      "field_type": "text",
      "required": true,
      "options": null
    },
    {
      "id": 3,
      "name": "required completion time",
      "field_type": "date",
      "required": true,
      "options": null
    }
  ]
}
```

## 3. Task Endpoints

### 3.1. List Sent Tasks

- **URL**: `/api/tasks/sent/
- **Method**: `GET`
- **Description**: Returns a list of tasks that created by current user
- **Query Parameters**: task__created_by  = current_user.id

**Response:**

```json
{
  "count": 2,
  "next": null,
  "previous": null,
  "results": [
    {
      "id": 1,
       "title": "BT001",
      "process": {
        "name": "maintenance request"
      },
      "state": "pending",
      "created_at": "2023-05-08T10:30:00Z",
      "recipient": "user5", #User that can perform action so this task will move to the next state



    },
    {
      "id": 2,
       "title": "BT002",
      "process": {
        "name": "maintenance request"
      },
      "status": "working-on",
      "created_at": "2023-05-08T10:30:00Z",
      "recipient": "user2", #User that can perform action so this task will move to the next state
    }
  ]
}
```
### 3.2. List Received Tasks

- **URL**: `/api/tasks/received/
- **Method**: `GET`
- **Description**: Returns a list of tasks that need an action by current user
- **Query Parameters**: state__transitions_from__actiontransition__action__in = ProcessUserAction.action

**Response:**

```json
{
  "count": 2,
  "next": null,
  "previous": null,
  "results": [
    {
      "id": 1,
       "title": "BT001",
      "process": {
        "name": "maintenance request"
      },
      "status": "pending",
      "created_by": "user1",
      "action": "approve", #action that can perform by current user
    },
    {
      "id": 1,
       "title": "BT002",
      "process": {
        "name": "maintenance request"
      },
      "status": "pending",
      "created_by": "user1",
      "action": "approve", #action that can perform by current user
    }
  ]
}
```

### 3.3. Create Task

- **URL**: `/api/tasks/`
- **Method**: `POST`
- **Description**: Creates a new task


**Request:**

```json
{
  "process": 1,
  "title": "BT123",
  "fields": [
    {
      "field_id": 2,
      "value": "Bathroom faucet is leaking and needs repair"
    },
    {
      "field_id": 1,
      "value": "Property-123"
    },
    {
      "field_id": 3,
      "value": "2023-05-20"
    }
  ]
}


### 3.4. Get Task Detail

- **URL**: `/api/tasks/{id}/`
- **Method**: `GET`
- **Description**: Returns details of a specific task


**Response:**
```json
{
       "id": 1,
       "title": "BT002",
      "process": {
        "name": "maintenance request"
      },
      "status": "pending",
      "created_by": "user1",
      "action": "approve", #action that can perform by current user
}
```


### 3.5. Update Task Status

- **URL**: `/api/tasks/{id}/status/`
- **Method**: `PATCH`
- **Description**: Updates the status of a task


**Request:**

```json
{
  "status": "in_progress"
}
```

**Response:**

```json
{
  "id": 1,
  "status": "in_progress",
  "updated_at": "2023-05-09T08:30:00Z"
}
```