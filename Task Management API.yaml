openapi: 3.0.3
info:
  title: Task Management API
  version: 1.0.0
  description: Your project description
paths:
  /api/processes/:
    get:
      operationId: api_processes_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProcessList'
          description: ''
  /api/processes/{id}/:
    get:
      operationId: api_processes_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this process.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Process'
          description: ''
  /api/tasks/:
    post:
      operationId: api_tasks_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskCreate'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskCreate'
          description: ''
  /api/tasks/{id}/:
    get:
      operationId: api_tasks_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetail'
          description: ''
  /api/tasks/{id}/action/:
    post:
      operationId: api_tasks_action_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/tasks/received/:
    get:
      operationId: api_tasks_received_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReceivedTaskList'
          description: ''
  /api/tasks/sent/:
    get:
      operationId: api_tasks_sent_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSentTaskList'
          description: ''
  /api/token/:
    post:
      operationId: api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/users/:
    get:
      operationId: api_users_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
  /api/users/me/:
    get:
      operationId: api_users_me_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
components:
  schemas:
    Department:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
      required:
      - id
      - name
    FieldTypeEnum:
      enum:
      - text
      - number
      - date
      - select
      - checkbox
      - file
      - json
      - assignee
      type: string
      description: |-
        * `text` - Text
        * `number` - Number
        * `date` - Date
        * `select` - Select
        * `checkbox` - Checkbox
        * `file` - File
        * `json` - Table
        * `assignee` - Assignee
    PaginatedProcessList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Process'
    PaginatedReceivedTaskList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/ReceivedTask'
    PaginatedSentTaskList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/SentTask'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Process:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        description:
          type: string
          nullable: true
        fields:
          type: array
          items:
            $ref: '#/components/schemas/ProcessField'
          readOnly: true
      required:
      - fields
      - id
      - name
    ProcessField:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        field_type:
          $ref: '#/components/schemas/FieldTypeEnum'
        required:
          type: boolean
        options:
          nullable: true
        order:
          type: integer
          maximum: 2147483647
          minimum: 0
      required:
      - id
      - name
    ReceivedTask:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        process:
          allOf:
          - $ref: '#/components/schemas/TaskProcess'
          readOnly: true
        state:
          type: string
        state_type:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: string
          readOnly: true
        action:
          type: string
          readOnly: true
      required:
      - action
      - created_at
      - created_by
      - id
      - process
      - state
      - state_type
      - title
    Role:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
      required:
      - id
      - name
    SentTask:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        process:
          allOf:
          - $ref: '#/components/schemas/TaskProcess'
          readOnly: true
        state:
          type: string
        state_type:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        recipient:
          type: string
          readOnly: true
      required:
      - created_at
      - id
      - process
      - recipient
      - state
      - state_type
      - title
    TaskActionLog:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          $ref: '#/components/schemas/TaskUser'
        action:
          type: string
          readOnly: true
        timestamp:
          type: string
          format: date-time
          readOnly: true
      required:
      - action
      - id
      - timestamp
      - user
    TaskCreate:
      type: object
      properties:
        process:
          type: integer
        title:
          type: string
          maxLength: 255
        fields:
          type: array
          items:
            $ref: '#/components/schemas/TaskDataInput'
          writeOnly: true
      required:
      - fields
      - process
      - title
    TaskData:
      type: object
      properties:
        field:
          type: string
          readOnly: true
        value:
          type: string
      required:
      - field
      - value
    TaskDataInput:
      type: object
      properties:
        field_id:
          type: integer
        value:
          type: string
      required:
      - field_id
      - value
    TaskDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        process:
          $ref: '#/components/schemas/TaskProcess'
        state:
          $ref: '#/components/schemas/TaskState'
        created_by:
          $ref: '#/components/schemas/TaskUser'
        created_at:
          type: string
          format: date-time
          readOnly: true
        task_data:
          type: array
          items:
            $ref: '#/components/schemas/TaskData'
        action_logs:
          type: array
          items:
            $ref: '#/components/schemas/TaskActionLog'
        available_actions:
          type: string
          readOnly: true
      required:
      - action_logs
      - available_actions
      - created_at
      - created_by
      - id
      - process
      - state
      - task_data
      - title
    TaskProcess:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
      - id
      - name
    TaskState:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        state_type:
          type: string
      required:
      - id
      - name
    TaskUser:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
      required:
      - id
      - username
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        department:
          $ref: '#/components/schemas/Department'
        role:
          $ref: '#/components/schemas/Role'
      required:
      - department
      - id
      - role
      - username
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
